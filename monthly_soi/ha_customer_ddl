--setting compression parameters to true
set hive.exec.compress.output=true;
set hive.exec.compress.intermediate=true;

--Dropping current partitions from Event History TABLE to make sure that latest record is loaded
ALTER TABLE ${hiveconf:DATABASE_NAME}.STP_CUSTOMER_EVENT_HISTORY DROP IF EXISTS PARTITION (LOAD_DAY='${hiveconf:CURRENT_PART}');

--Insert into event history snapshot table that will be used by APIs
INSERT INTO ${hiveconf:DATABASE_NAME}.STP_CUSTOMER_EVENT_HISTORY PARTITION (LOAD_DAY)
SELECT
DATE_FORMAT(EVENT_DATE_GMT,'yyyy-MM-dd HH:mm:ss') EVENT_DATE_GMT   ,
MDN              ,
EMIN             ,
IMEI             ,
IMSI             ,
RECORD_TYPE      ,
EVENT_ID         ,
EVENT_TYPE       ,
EVENT_NAME       ,
EVENT_LOCATION   ,
EVENT_DETAILS    ,
SERVICE_IMPACTED ,
SERVICE_TYPE     ,
DATE_FORMAT(START_DATE,'yyyy-MM-dd HH:mm:ss') START_DATE,
DATE_FORMAT(RESOLVED_DATE,'yyyy-MM-dd HH:mm:ss') RESOLVED_DATE,
RESOLVED_CATEGORY,
SEVERITY,
CURRENT_TIMESTAMP AS CREATE_DATE,
DATA_SOURCE,
EVENT_CATEGORY,
CUSTOMER_IMPACTED_TIME_INTERVALS,
OUTAGE_CUSTOMER_STATUS,
OUTAGE_CUSTOMER_LOCATION,
EVENT_DURATION,
CURRENT_DATE AS LOAD_DAY
FROM (
--EVENTS from IVR outages
SELECT
EVENT_DATE_GMT,
MDN,
EMIN,
IMEI,
IMSI,
RECORD_TYPE,
EVENT_ID,
EVENT_TYPE,
EVENT_NAME,
EVENT_LOCATION,
EVENT_DETAILS,
SERVICE_IMPACTED,
SERVICE_TYPE,
START_DATE,
RES_DATE RESOLVED_DATE,
CASE WHEN RES_DATE IS NULL THEN 'Not Resolved' ELSE 'Resolved' END RESOLVED_CATEGORY,
SEVERITY,
DATA_SOURCE,
'Network Event' EVENT_CATEGORY,
CUSTOMER_IMPACTED_TIME_INTERVALS,
OUTAGE_CUSTOMER_STATUS,
OUTAGE_CUSTOMER_LOCATION,
EVENT_DURATION
FROM (
SELECT
DAT.*,
ROW_NUMBER() OVER(PARTITION BY MDN,EVENT_ID ORDER BY DATA_SOURCE,LOAD_TIME DESC) RN
FROM
(
SELECT MDNN.EVENT_DATE_GMT,MDNN.MDN,MDNN.EMIN,MDNN.IMEI,MDNN.IMSI,MDNN.RECORD_TYPE,MDNN.EVENT_ID,MDNN.EVENT_TYPE,EVENT.EVENT_NAME,
EVENT.EVENT_LOCATION,EVENT.EVENT_DETAILS,MDNN.SERVICE_IMPACTED,MDNN.SERVICE_TYPE,MDNN.START_DATE,EVENT.RES_DATE,
MDNN.SEVERITY,MDNN.DATA_SOURCE,MDNN.CUSTOMER_IMPACTED_TIME_INTERVALS,MDNN.OUTAGE_CUSTOMER_STATUS,MDNN.OUTAGE_CUSTOMER_LOCATION,MDNN.EVENT_DURATION,MDNN.EVENT_DAY,EVENT.CREATE_DATE,MDNN.LOAD_TIME FROM
(SELECT * FROM ${hiveconf:DATABASE_NAME}.STP_CUSTOMER_EVENT_HISTORY_IVR WHERE EVENT_DAY >= ${hiveconf:FILTER} AND MDN IS NOT NULL) MDNN,
( SELECT EVENT_ID,MAX(EVENT_NAME) EVENT_NAME,MAX(EVENT_LOCATION) EVENT_LOCATION,MAX(EVENT_DETAILS) EVENT_DETAILS,MAX(RESOLVED_DATE) RES_DATE,
  MAX(CREATE_DATE) CREATE_DATE FROM ${hiveconf:DATABASE_NAME}.STP_CUSTOMER_EVENT_HISTORY_IVR
  WHERE EVENT_DAY >= ${hiveconf:FILTER} AND UPPER(EVENT_NAME) NOT LIKE '%TEST%' GROUP BY EVENT_ID ) EVENT
WHERE MDNN.EVENT_ID = EVENT.EVENT_ID
) DAT
)EVENT_DATA WHERE RN=1
-- Events from Remedy Table
UNION ALL
SELECT
EVENT_DATE_GMT   ,
MDN              ,
EMIN             ,
IMEI             ,
IMSI             ,
RECORD_TYPE      ,
EVENT_ID         ,
EVENT_TYPE       ,
EVENT_NAME       ,
EVENT_LOCATION   ,
EVENT_DETAILS    ,
SERVICE_IMPACTED ,
SERVICE_TYPE     ,
START_DATE       ,
RESOLVED_DATE    ,
RESOLVED_CATEGORY,
SEVERITY,
DATA_SOURCE,
'NRB Ticket' EVENT_CATEGORY,
NULL CUSTOMER_IMPACTED_TIME_INTERVALS,
NULL OUTAGE_CUSTOMER_STATUS,
NULL OUTAGE_CUSTOMER_LOCATION,
NULL EVENT_DURATION
FROM
(SELECT
SCR.*,
ROW_NUMBER() OVER(PARTITION BY EVENT_DAY,MDN,EVENT_ID ORDER BY CREATE_DATE DESC) RN1
FROM ${hiveconf:DATABASE_NAME}.STP_CUSTOMER_EVENT_HISTORY_REMEDY SCR
WHERE EVENT_DAY  >= ${hiveconf:FILTER}
) dat WHERE RN1=1
--Events from Device change
UNION ALL
SELECT
EVENT_DATE_GMT   ,
MDN              ,
EMIN             ,
IMEI             ,
IMSI             ,
RECORD_TYPE      ,
EVENT_ID         ,
EVENT_TYPE       ,
EVENT_NAME       ,
EVENT_LOCATION   ,
EVENT_DETAILS    ,
SERVICE_IMPACTED ,
SERVICE_TYPE     ,
START_DATE       ,
RESOLVED_DATE    ,
RESOLVED_CATEGORY,
SEVERITY,
DATA_SOURCE,
'Device Change' EVENT_CATEGORY ,
NULL CUSTOMER_IMPACTED_TIME_INTERVALS,
NULL OUTAGE_CUSTOMER_STATUS,
NULL OUTAGE_CUSTOMER_LOCATION,
NULL  EVENT_DURATION
FROM (
SELECT
SDC.*,
ROW_NUMBER() OVER(PARTITION BY EVENT_DAY,MDN,EVENT_ID ORDER BY CREATE_DATE DESC) RN2
FROM ${hiveconf:DATABASE_NAME}.STP_CUSTOMER_EVENT_HISTORY_DEVICE_CHANGE SDC
WHERE EVENT_DAY >= ${hiveconf:FILTER}
) dc WHERE RN2=1
--Events from QCI Switch
UNION ALL
SELECT
EVENT_DATE_GMT   ,
MDN              ,
EMIN             ,
IMEI             ,
IMSI             ,
RECORD_TYPE      ,
EVENT_ID         ,
EVENT_TYPE,
'QCI SWITCH' EVENT_NAME,
NULL EVENT_LOCATION   ,
EVENT_DETAILS    ,
SERVICE_IMPACTED ,
SERVICE_TYPE     ,
START_DATE       ,
RESOLVED_DATE    ,
RESOLVED_CATEGORY,
SEVERITY,
DATA_SOURCE,
EVENT_CATEGORY  ,
NULL CUSTOMER_IMPACTED_TIME_INTERVALS,
NULL OUTAGE_CUSTOMER_STATUS,
NULL OUTAGE_CUSTOMER_LOCATION,
NULL  EVENT_DURATION
FROM(
SELECT
SQS.*,
ROW_NUMBER() OVER(PARTITION BY EVENT_DAY,MDN ORDER BY CREATE_DATE DESC) RN3
FROM ${hiveconf:DATABASE_NAME}.STP_CUSTOMER_EVENT_HISTORY_QCI SQS
WHERE EVENT_DAY >= ${hiveconf:FILTER}
)qs
) final_data;

--Dropping old partitions from Event History TABLE for data purge
ALTER TABLE ${hiveconf:DATABASE_NAME}.STP_CUSTOMER_EVENT_HISTORY DROP IF EXISTS PARTITION (LOAD_DAY<'${hiveconf:LAST_PART}');
