#!/bin/sh
##############################################################################################################################################################
##############################################################################################################################################################
##### Author    : Karthika
#####
##### Purpose   : Used to load the QCI data into Hive Tables
#####
#####  Usage    : ./stp_load_qci.sh
##############################################################################################################################################################
##############################################################################################################################################################
#set -x
if [[ -z $STPBASE ]]
then
  echo "STPBASE not set, cannot proceed further."
 exit 1
fi
. $STPBASE/config/load_stp_config.cfg

### Global Variables for this script

PROCESS="stp_load_qci"
datafalg=0
DRUID_INGESTION_CHECK=$STPBASE/permit/qci_cong_hrly_failed.ctl
if [[ $# -eq 0 ]]
then
        echo "No argument passed. Taking default value as previous day"
        qci_date=`date -d '-1 day' "+%Y-%m-%d"`
        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$  "[INFO] ----- Process START -----"
        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$  "[INFO] QCI data to be processed for date: $qci_date"
elif [[ $# -eq 1 ]]
then
        qci_date=$1
        if [[ $qci_date =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && date -d $qci_date "+%Y-%m-%d" >/dev/null 2>&1
        then
                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$  "[INFO] ----- Process START -----"
                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$  "[INFO] QCI data to be processed for date: $qci_date"
        else
                echo "Invalid date. Command line Date arguments expected format yyyy-Mm-dd"
                exit 1
        fi
fi
druid_ingestion()
{
        starttime=$qci_date
        endtime=`date -d "$qci_date +1day" "+%Y-%m-%d"`
        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Invoking Druid job $STP_DRUID_MIN_QCI_CONG_HRLY_PROCESS"
        $STPBASE/scripts/$STP_DRUID_MIN_QCI_CONG_HRLY_PROCESS $starttime $endtime
        if [[ $? -ne 0 ]]
        then
                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] Failed to ingest qci hourly data"
                touch $DRUID_INGESTION_CHECK
                #exit 1
        else
                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Successfully loaded qci hourly data to druid"
        fi
}
nsr_date=`date -d "$qci_date" '+%C%y%m%d'`
qci_date_yyyymmdd=$nsr_date

## Make the necessary directories.
mkdir -p $LOAD_STP_QCI_LOG_DIR 2>/dev/null
hdfs dfs -mkdir -p $LOAD_STP_QCI_ARCHIVE_DIR 2>/dev/null
hdfs dfs -mkdir -p $LOAD_STP_QCI_HDFS_WORK_DIR 2>/dev/null
hdfs dfs -mkdir -p $STP_MIN_QCI_CONGESTION_HOURLY 2>/dev/null

## Checking that there is no other instance of this script running
if [[ -a $LOAD_STP_QCI_PID_FILE ]]
then
    ## Now get the pid from the PID file and see if the PID is active, and
    ## relevant to this process.
    pid=$(cat $LOAD_STP_QCI_PID_FILE 2>>$LOAD_STP_QCI_LOG_FILE)
    ps -o args= -p $pid | grep $PROCESS > /dev/null 2>&1
    if [[ $? == 0 ]]
    then
        if [[ -t 0 ]]
        then
                echo "*** $(basename $0) is already running ***"
                ps -fp $pid
        else
                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$  "[INFO] *** $(basename $0) Already running:\n $(ps -fp $pid)"
        fi
        ## Duplicate instance. Process stops.
        exit 1
    fi
fi
if [[ -e $DRUID_INGESTION_CHECK ]]
then
        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] As Previous Instance failed at druid ....Process starts from Druid Ingestion"
        druid_ingestion
        rm $DRUID_INGESTION_CHECK
        exit 0
fi

if hdfs dfs -test -d $LOAD_STP_QCI_HDFS_INPUT_DIR$qci_date_yyyymmdd 2>/dev/null; then
    echo $$ > $LOAD_STP_QCI_PID_FILE

                        #Calling stp_rtt_fork_ingress_files.sh to fork the input files for RTT processes

                        $STP_RTT_FORK_INGRESS_FILES_SHELL_SCRIPT $LOAD_STP_QCI_HDFS_INPUT_DIR$qci_date_yyyymmdd/$STP_QCI_FILE_PATTERN $STP_RTT_LOAD_QCI_RAW_HDFS_INPUT_DIR$qci_date_yyyymmdd/

                        if [[ $? -ne 0 ]]
                        then
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] Error copying files $LOAD_STP_QCI_HDFS_INPUT_DIR$qci_date_yyyymmdd/$STP_QCI_FILE_PATTERN to $STP_RTT_LOAD_QCI_RAW_HDFS_INPUT_DIR/"
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Check logs at: $STP_RTT_FORK_INGRESS_FILES_LOG_FILE"
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] ***Exiting***"
                                exit 1
                        else
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Copied/Ensured the files are present..."
                        fi

    input_file_list=$(hdfs dfs -ls $LOAD_STP_QCI_HDFS_INPUT_DIR$qci_date_yyyymmdd/$STP_QCI_FILE_PATTERN 2>/dev/null)
    if [[ $? -ne 0 ]]
    then
        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] No QCI files in $LOAD_STP_QCI_HDFS_INPUT_DIR$qci_date_yyyymmdd. Hence exiting"
        exit 0
    else
        prev_date=$(date -d "$qci_date -1 days" +%Y-%m-%d)
                prev_date_file_list=$(hdfs dfs -ls $LOAD_STP_QCI_HDFS_WORK_DIR/QCI9-$prev_date.csv 2>/dev/null)
        if [[ $? -ne 0 ]]
        then
            scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] No QCI files for $prev_date"
            qci_input_dir=$LOAD_STP_QCI_HDFS_INPUT_DIR$qci_date_yyyymmdd/$STP_QCI_FILE_PATTERN
        else
            qci_input_dir=$LOAD_STP_QCI_HDFS_INPUT_DIR$qci_date_yyyymmdd/$STP_QCI_FILE_PATTERN,$LOAD_STP_QCI_HDFS_WORK_DIR/QCI9-$prev_date.csv
        fi

        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Processing QCI files from $qci_input_dir"

    #Verifying NSR data
        nsr_part=`/usr/bin/hive -e "show partitions $STPSCHEMA.$NSR_DAILY_AGG_TABLE_HIVE_TABLE partition(nsr_date='$qci_date_yyyymmdd');"`
        if [ ! -z "$nsr_part" ]; then
          scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] NSR Daily data available for $score_date"
        else
          scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] Required partition not found in $STPSCHEMA.$NSR_DAILY_AGG_TABLE_HIVE_TABLE partition(nsr_date='$qci_date_yyyymmdd') ...exiting"
          #exit 1
          exit
        fi

    #Truncate stg table
        /usr/bin/hive -e "truncate table $DBSCHEMA.$STP_QCI_DATA_STG_HIVE_TABLE;" >> $LOAD_STP_QCI_LOG_FILE
        if [[ $? -ne 0 ]]
        then
                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$  "[ERROR] Error truncating $STP_QCI_DATA_STG_HIVE_TABLE"
                exit 1
        else
                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$  "[INFO] $STP_QCI_DATA_STG_HIVE_TABLE truncated"
        fi

        #pig script to load into stg table
        pig_log=$LOAD_STP_QCI_LOG_DIR/.pig.log
        /usr/bin/pig -Dexectype=tez -Dpig.additional.jars=$PIGGYBANK_JAR -useHCatalog -f $LOAD_STP_QCI_STG_PIGSCRIPT -param load_stp_qci_hdfs_source_dir=$qci_input_dir -param stp_qci_congestion_data_stg=$STP_QCI_DATA_STG_HIVE_TABLE -param dbschema=$DBSCHEMA >$pig_log 2>&1
        if [[ $? -ne 0 ]]
        then
                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] in loading QCI data into $STP_QCI_DATA_STG_HIVE_TABLE for date:$qci_date"
                cat $pig_log >> $LOAD_STP_QCI_LOG_FILE
                rm $pig_log
                #exit 1
                exit
        else
                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Loaded QCI data into $STP_QCI_DATA_STG_HIVE_TABLE for date: $qci_date"
                cat $pig_log >> $LOAD_STP_QCI_LOG_FILE
                rm $pig_log
                hive_log=$LOAD_STP_QCI_LOG_DIR/.hive.log
                if [[ $STP_QCI_DAILY_AGG == "Y" ]]
                then
                        # hql to drop if partition already exists
                        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Dropping partition in $STP_MIN_QCI_CONGESTION_HIVE_TABLE if exists for date: $qci_date"
                        /usr/bin/hive -f $STP_DROP_PARTITION_QCI_HQL -hiveconf dbschema=$DBSCHEMA -hiveconf stp_min_qci_congestion=$STP_MIN_QCI_CONGESTION_HIVE_TABLE -hiveconf partition_value_yyyy_MM_dd=$qci_date >>$hive_log 2>&1
                        if [[ $? -ne 0 ]]; then
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] occurred while executing $STP_DROP_PARTITION_QCI_HQL"
                                cat $hive_log >> $LOAD_STP_QCI_LOG_FILE
                                rm $hive_log
                                exit 1
                        else
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Executed $STP_DROP_PARTITION_QCI_HQL"
                                cat $hive_log >> $LOAD_STP_QCI_LOG_FILE
                                rm $hive_log
                        fi
                        #pig script to load into qci final table
                        /usr/bin/pig -Dexectype=tez -Dpig.additional.jars=$PIGGYBANK_JAR -useHCatalog -f $LOAD_STP_QCI_PIGSCRIPT -param dbschema=$DBSCHEMA -param stp_min_translation=$LOAD_MIN_TRANSLATION_HIVE_TABLE -param stp_qci_congestion_data_stg=$STP_QCI_DATA_STG_HIVE_TABLE -param nsr_geospatial_hourly_agg=$NSR_HOURLY_AGG_HIVE_TABLE -param stp_min_qci_congestion=$STP_MIN_QCI_CONGESTION_HIVE_TABLE  -param nsr_date_yyyyMMdd=$nsr_date -param score_date_yyyy_mm_dd=$qci_date >$pig_log 2>&1
                        if [[ $? -ne 0 ]]
                        then
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] in loading QCI data into $STP_MIN_QCI_CONGESTION_HIVE_TABLE for date:$qci_date"
                                cat $pig_log >> $LOAD_STP_QCI_LOG_FILE
                                rm $pig_log
                                #exit 1
                                exit
                        else
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Loaded QCI data into $STP_MIN_QCI_CONGESTION_HIVE_TABLE for date: $qci_date"
                                dataflag=1
                                cat $pig_log >> $LOAD_STP_QCI_LOG_FILE
                                rm $pig_log
                        fi
               fi
                if [[ $STP_QCI_HRLY_AGG == "Y" ]]
               then
                        # qci hourly to drop if partition already exists
                        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "Dropping partition at $STP_MIN_QCI_CONGESTION_HOURLY if exists for date: $qci_date"
                        if  hdfs dfs -test -d $STP_MIN_QCI_CONGESTION_HOURLY"congestion_date_gmt="$qci_date 2>/dev/null;then
                                hdfs dfs -rm -r -skipTrash $STP_MIN_QCI_CONGESTION_HOURLY"congestion_date_gmt="$qci_date >>$LOAD_STP_QCI_LOG_FILE
                                if [[ $? -eq 0 ]];then
                                        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Deleted $STP_MIN_QCI_CONGESTION_HOURLY/"congestion_date_gmt="$qci_date"
                                else
                                        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] occurred while deleting  congetsion_date_gmt=$qci_date partiiton"
                                        exit 1
                                fi
                        fi
                        #pig script to load into qci final table
                        /usr/bin/pig -Dexectype=tez -Dpig.additional.jars=$PIGGYBANK_JAR -useHCatalog -f $LOAD_STP_QCI_HOURLY_PIGSCRIPT -param dbschema=$DBSCHEMA -param stp_min_translation=$LOAD_MIN_TRANSLATION_HIVE_TABLE -param stp_qci_congestion_data_stg=$STP_QCI_DATA_STG_HIVE_TABLE -param nsr_geospatial_hourly_agg=$NSR_HOURLY_AGG_HIVE_TABLE -param stp_min_qci_congestion_hourly=$STP_MIN_QCI_CONGESTION_HOURLY -param nsr_date_yyyyMMdd=$nsr_date -param score_date_yyyy_mm_dd=$qci_date >$pig_log 2>&1
                        if [[ $? -ne 0 ]]
                        then
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] in Storing QCI  hourly data at $STP_MIN_QCI_CONGESTION_HOURLY for date:$qci_date"
                                cat $pig_log >> $LOAD_STP_QCI_LOG_FILE
                                rm $pig_log
                                #exit 1
                                exit
                        else
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Loaded QCI hourly data at $STP_MIN_QCI_CONGESTION_HOURLY for date: $qci_date"
                                dataflag=1
                                cat $pig_log >> $LOAD_STP_QCI_LOG_FILE
                                rm $pig_log
                                if [[ $STP_DRUID_QCI_INGESTION_FLAG == Y ]]
                                then
                                        druid_ingestion
                                 fi
                        fi
                fi
                if [[ dataflag -eq 1 ]]
                then
                        #Move processed file to work directory

                        hdfs dfs -mv $LOAD_STP_QCI_HDFS_INPUT_DIR$qci_date_yyyymmdd/$STP_QCI_FILE_PATTERN $LOAD_STP_QCI_HDFS_WORK_DIR 2>/dev/null
                        if [ $? -ne 0 ]; then
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] in moving $qci_date file to $LOAD_STP_QCI_HDFS_WORK_DIR"
                                exit 1
                        else
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Moved $qci_date file to $LOAD_STP_QCI_HDFS_WORK_DIR"
                        fi

                        #Archive 2 days old data

                        two_days_old_date=$(date -d "$qci_date -2 days" +%Y-%m-%d)
                        two_days_old_file_list=$(hdfs dfs -ls $LOAD_STP_QCI_HDFS_WORK_DIR/QCI9-$two_days_old_date.csv 2>/dev/null)
                        if [[ $? -ne 0 ]]
                        then
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[WARN] No QCI files for $two_days_old_date"
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[WARN] Nothing to archive"
                        else
                                scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Moving $two_days_old_date files to archive"
                                hdfs dfs -mv $LOAD_STP_QCI_HDFS_WORK_DIR/QCI9-$two_days_old_date.csv $LOAD_STP_QCI_ARCHIVE_DIR/ 2>/dev/null
                                if [ $? -ne 0 ]; then
                                        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[ERROR] in moving $two_days_old_date files to archive"
                                        exit 1
                                else
                                        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$ "[INFO] Moved $two_days_old_date files to archive"
                                fi
                        fi
                        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$  "[INFO] ----- Process FINISHED -----"
                fi
        fi
    fi
else
        scriptlogger $LOAD_STP_QCI_LOG_FILE $PROCESS $$  "[ERROR] Input Directory - $LOAD_STP_QCI_HDFS_INPUT_DIR$qci_date_yyyymmdd does not exist.Hence exiting"
    exit 0
fi
