#!/bin/sh
####################################################################################################################
# Author    : Mohan S
# Purpose   : Used as wrapper to load the RTT NSR Daily, Hourly, 15Min data sets
####################################################################################################################


if [[ -z $STPBASE ]]
then
  echo "STPBASE not set, cannot proceed further."
  exit 1
fi

. $STPBASE/config/load_stp_config.cfg

Usage()
{
  echo "Usage:$0"
  echo "sh stp_load_rtt_nsr_wrapper.sh [<yyyymmddhhmi]>"
  echo "Ex: $0 201903262345"
  exit 1
}

### Declare Global Variables
PROCESS=$(basename ${0%.*})
LOGFILE=$STP_LOAD_RTT_NSR_WRAPPER_LOG_FILE
PIDFILE=$STP_LOAD_RTT_NSR_WRAPPER_PID_FILE
LOGDIR=$STP_LOAD_RTT_NSR_WRAPPER_LOG_DIR
DAILY_SCRIPT=$STP_RTT_NSR_DAILY_SHELL_SCRIPT
HOURLY_SCRIPT=$STP_RTT_NSR_HOURLY_SHELL_SCRIPT
MIN15_SCRIPT=$STP_RTT_NSR_15MIN_SHELL_SCRIPT
LATENCY_MINS=$STP_RTT_NSR_LATENCY_MINS
NSR_CTL_FILE=$STP_RTT_NSR_WRAPPER_CTL_FILE
curr_date=`date "+%Y-%m-%d %H:%M:%S"`
################################################################################
################################################################################
##### Function: InstanceCheck
InstanceCheck()
{
  ## See if the PID file exists and if it doesn't, we're good.
  if [[ -a $PIDFILE ]]
  then
    ## Now get the pid from the PID file and see if the PID is active, and
    ## relevant to this process.
    pid=$(cat $PIDFILE 2>>$LOGFILE)
    ps -o args= -p $pid | grep $PROCESS > /dev/null 2>&1
    if [[ $? == 0 ]]
    then
      if [[ -t 0 ]]
      then
        echo "*** $(basename $0) is already running ***"
        ps -fp $pid
      else
        scriptLogger $LOGFILE $PROCESS $$  "[INFO]" " *** $(basename $0) Already running:\n $(ps -fp $pid)"
      fi
      ## Duplicate instance, so we have to exit.
      exit 1
    fi
  fi
}

################################################################################
################################################################################
##### Function: WritePIDFile
WritePIDFile()
{
  ## Write the PID to PID file.
  echo $$ > $PIDFILE
}

################################################################################
################################################################################
##### Function: WritePIDFile
WriteToCtlFile()
{
  ## Write the PID to PID file.
  new_ctl_dt=`date "+%Y/%m/%d %H:%M:%S" -d "$(date -d "$ctl_dt") +15 min"`
  echo $new_ctl_dt > $NSR_CTL_FILE
  scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " Control file $NSR_CTL_FILE successfully updated with new segment: $new_ctl_dt"
}

################################################################################
################################################################################
##### Function: ValidateArgs
ValidateArgs()
{
  if [[ $# -eq 0 ]]
  then
    scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " No arguments passed. Calculating the interval based on control file: $NSR_CTL_FILE"
    #NTSBD-230
    #Commenting runtime parameter and changing based on control file
    #run_dt=`date "+%Y%m%d%H%M" -d "$(date -d "$curr_date") $LATENCY_MINS min"`
    ctl_dt=$(cat $NSR_CTL_FILE 2>>$LOGFILE)
    run_dt=`date "+%Y%m%d%H%M" -d "$(date -d "$ctl_dt") $LATENCY_MINS minutes ago"`
    scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " Date value in Control file: $ctl_dt, Date Val after latency=$run_dt"
    WriteToCtlFile
  elif [[ $# -eq 1 ]]
  then
    scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " Value of the argument passed is date_val=$1"
    #Only date is given
    run_dt=$1
  else
    scriptLogger $LOGFILE $PROCESS $$ "[ERROR]" " Wrong number of arguments passed."
    Usage
  fi

  checkDate $run_dt
  #Loop for all Hrs in a day
  scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " Processing Date Value: $run_dt"
  CoreLogic $run_dt
}

################################################################################
################################################################################
##### Function: checkDate
checkDate()
{
  date_val=`echo $1|cut -c 1-8`
  hr_val=`echo $1|cut -c 9-10`
  min_val=`echo $1|cut -c 11-12`
  if [[ ($(date "+%Y%m%d" -d "$date_val") -eq "$date_val") && (${hr_val#0} -le "23" && ${hr_val#0} -ge "0") && ($min_val -eq "00" || $min_val -eq "15" || $min_val -eq "30" || $min_val -eq "45") ]]
  then
    scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " Valid argument. Proceeding to process"
  else
    scriptLogger $LOGFILE $PROCESS $$ "[ERROR]" " Invalid argument. Exiting..."
    Usage
  fi
}

################################################################################
################################################################################
##### Function: CoreLogic
CoreLogic()
{
  runDate=$1

  scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " Parameters for the script:"
  scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " CURR_DATE=$runDate"

  DAILY_INTERVAL=`echo $runDate|cut -c 1-8`
  scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " DAILY_INTERVAL=$DAILY_INTERVAL"

  HOURLY_ITERVAL=`echo $runDate|cut -c 1-10`
  scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " HOURLY_ITERVAL=$HOURLY_ITERVAL"

  MIN15_INTERVAL=`echo $runDate|cut -c 1-12`
  scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " MIN15_INTERVAL=$MIN15_INTERVAL"

  scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " Checking the input directory for the interval=$runDate"

  CheckIfExistsHDFSPath $runDate

  #Running 15 min agg
  $MIN15_SCRIPT $MIN15_INTERVAL
  if [[ $? -eq 0 ]]
    then
       scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " $MIN15_SCRIPT executed successfully for the interval $MIN15_INTERVAL . Please check $STP_LOAD_RTT_NSR_15MIN_AGG_LOG_FILE file for furhter logs."
  else
       scriptLogger $LOGFILE $PROCESS $$ "[WARN]" " $MIN15_SCRIPT FAILED for the interval $MIN15_INTERVAL . Please check $STP_LOAD_RTT_NSR_15MIN_AGG_LOG_FILE file for furhter logs."
  fi

  #Checking if it is the last 15min interval of the hour
  if [[ `echo $MIN15_INTERVAL|cut -c 11-12` == "45" ]]
  then
    $HOURLY_SCRIPT $HOURLY_ITERVAL
    if [[ $? -eq 0 ]]
      then
         scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " $HOURLY_SCRIPT executed successfully for the interval $HOURLY_ITERVAL . Please check $STP_LOAD_RTT_NSR_HOURLY_AGG_LOG_FILE file for furhter logs."
    else
         scriptLogger $LOGFILE $PROCESS $$ "[WARN]" " $HOURLY_SCRIPT FAILED for the interval $HOURLY_ITERVAL . Please check $STP_LOAD_RTT_NSR_HOURLY_AGG_LOG_FILE file for furhter logs."
    fi
    #Checking if it is the last hour of the day
    if [[ `echo $HOURLY_ITERVAL|cut -c 9-10` == "23" ]]
    then
      $DAILY_SCRIPT $DAILY_INTERVAL
      if [[ $? -eq 0 ]]
        then
           scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " $DAILY_SCRIPT executed successfully for the interval $DAILY_INTERVAL . Please check $STP_LOAD_RTT_NSR_DAILY_AGG_LOG_FILE file for furhter logs."
      else
           scriptLogger $LOGFILE $PROCESS $$ "[WARN]" " $DAILY_SCRIPT FAILED for the interval $DAILY_INTERVAL . Please check $STP_LOAD_RTT_NSR_DAILY_AGG_LOG_FILE file for furhter logs."
      fi
    else
      scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " Skipping Daily Data processing as it is not the last hour of the day"
    fi
  else
    scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " Skipping Hourly Data processing as it is not the last 15min interval of the hour"
  fi
  rm -f $PIDFILE
}

################################################################################
################################################################################
##### Function: CheckIfExistsHDFSPath
CheckIfExistsHDFSPath()
{
  trans_date=$1
  IpDir="$STP_RTT_P_TABLE_15MIN_AGG_HDFS_PATH$trans_date"
  hadoop fs -test -d "$IpDir"
  if [[ $? -ne 0 ]]
  then
    scriptLogger $LOGFILE $PROCESS $$ "[ERROR]" " Input path not found at $IpDir. Exiting..."
    scriptLogger $LOGFILE $PROCESS $$ "[ERROR]" " 15Min P-Table partition is not available for the interval: $trans_date . Please contact the support team and re-process the data."
    exit 1
  else
    scriptLogger $LOGFILE $PROCESS $$ "[INFO]" " Input path found at $IpDir . Good to go."
  fi
}

################################################################################
################################################################################
##### Function: Main
Main()
{
  scriptLogger $LOGFILE $PROCESS $$  "[INFO]" " ----- Process START -----"

  InstanceCheck

  WritePIDFile

  ValidateArgs $@

  scriptLogger $LOGFILE $PROCESS $$  "[INFO]" " ----- Process END -----"
  exit 0
}

#################################################################################
#################################################################################
##### Main Program

Main $@
