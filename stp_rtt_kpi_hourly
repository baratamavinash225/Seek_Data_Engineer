
-- ----------------------------------------------------------------------------------
--
-- This file contains Verizon Business CONFIDENTIAL code.
--
-- (C) COPYRIGHT 2014 Verizon Business Inc.
-- All rights Reserved Worldwide
-- US Government Users Restricted Rights - Use, duplication or
-- disclosure restricted by GSA ADP Schedule Contract with Verizon
-- Business Inc.
--
-- DDL         : stp_rtt_load_kpi_summary_hourly.pig
--
-- Author      : Sarvani A
--
-- Description : This script is to load data/voice KPIs from RTT to stp_rtt_kpi_summary_hourly hive table
--
-- Usage       : This script will be invoked from stp_rtt_load_kpi_summary_hourly.sh
--
--               /usr/bin/pig -Dpig.additional.jars=$PIGGYBANK_JAR -Dexectype=$PIGMODE \
--               -useHCatalog -t ColumnMapKeyPrune -f $PIGSCRIPT -l $LOGDIR \
--               -param source_schema=$STPSCHEMA \
--               -param source_table=agg_p_cell_sub_kpi_f \
--               -param subscriber_schema=$STPSCHEMA \
--               -param subscriber_table=stp_master_subscriber_profile \
--               -param source_sip_table=agg_p_sip_cell_sub_kpi_f\
--               -param source_rtp_table=agg_p_rtp_cell_sub_kpi_f\
--               -param trans_dt=2019-08-15 \
--               -param trans_hr=05 \
--               -param hdfs_out_path=$STPHDFSBASE/RTT/stp_rtt_kpi_summary_hourly \
--               -param hdfs_voice_invalid_imsis_out_path=$STPHDFSBASE/RTT/stp_rtt_kpi_summary_hourly_voice_invalid_imsis \
--               -param out_delim='|'
--
-- ----------------------------------------------------------------------------------

SET pig.tmpfilecompression false;
SET opt.multiquery false;
SET hive.exec.orc.split.strategy BI;

--SET mapreduce.map.java.opts -Xmx3072M;
SET mapreduce.map.java.opts -Xmx6144M;
SET mapreduce.task.io.sort.mb 1024;
SET pig.maxCombinedSplitSize 67108864;
--SET mapreduce.map.memory.mb 4096;
SET mapreduce.map.memory.mb 8192;
SET mapreduce.reduce.java.opts -Xmx6144M;
SET mapreduce.reduce.memory.mb 8192;
SET mapred.output.compress true;
SET mapreduce.job.reduce.slowstart.completedmaps 0.90;

SET ipc.maximum.data.length 268435456;
SET tez.am.container.idle.release-timeout-min.millis 5000;
SET tez.am.container.idle.release-timeout-max.millis 10000;
SET tez.am.resource.memory.mb 8192;
SET tez.task.resource.memory.mb 8192;
SET tez.runtime.io.sort.mb 1024;
SET tez.runtime.unordered.output.buffer.size-mb 2048;
SET tez.grouping.min-size 16777216;

--Load p_table
kpi_tbl = LOAD '$source_schema.$source_table' USING org.apache.hive.hcatalog.pig.HCatLoader();
--dump kpi_tbl;

--Filter by date/hour
kpi_hr_tbl = FILTER kpi_tbl BY (p_date_key >= (long)CONCAT(REPLACE('$trans_dt','-',''),'$trans_hr','00') and p_date_key <= (long)CONCAT(REPLACE('$trans_dt','-',''),'$trans_hr','59') );
--DUMP kpi_hr_tbl

--Load p_sip_table
kpi_sip_tbl = LOAD '$source_sip_schema.$source_sip_table' USING org.apache.hive.hcatalog.pig.HCatLoader();

--Filter by load_dt_hr
kpi_sip_fil_tbl = FILTER kpi_sip_tbl BY (p_date_key >= (long)CONCAT(REPLACE('$trans_dt','-',''),'$trans_hr','00') and p_date_key <= (long)CONCAT(REPLACE('$trans_dt','-',''),'$trans_hr','59') );

--Load p_rtp_table
kpi_rtp_tbl = LOAD '$source_rtp_schema.$source_rtp_table' USING org.apache.hive.hcatalog.pig.HCatLoader();

--Filter load_dt_hr
kpi_rtp_fil_tbl = FILTER kpi_rtp_tbl BY (p_date_key >= (long)CONCAT(REPLACE('$trans_dt','-',''),'$trans_hr','00') and p_date_key <= (long)CONCAT(REPLACE('$trans_dt','-',''),'$trans_hr','59') );

--Load subscriber profile table
load_subscriber_table = LOAD '$subscriber_schema.$subscriber_table' USING org.apache.hive.hcatalog.pig.HCatLoader();
--DUMP subscriber_table;

--Remove data having null or -1 in mdn, imei, imsi
subscriber_data = FILTER load_subscriber_table BY mdn is not null and mdn != '-1' and imei is not null and imei != '-1' and imsi is not null and imsi != '-1';

kpi_sip_hr_tbl = FOREACH kpi_sip_fil_tbl GENERATE
SUBSTRING(imsi,0,15) as imsi:chararray,
(chararray)p_date_key as date_key:chararray,
call_attempts_network as call_attempts_network:int,
call_attempts_wifi as call_attempts_wifi:int,
call_drop_including_ho_network as call_drop_including_ho_network: int,
call_drop_including_ho_wifi as call_drop_including_ho_wifi: int,
seer_network as seer_network: int,
seer_wifi as seer_wifi: int,
calls_with_a_leg_network as calls_with_a_leg_network: int,
calls_with_a_leg_wifi as calls_with_a_leg_wifi: int,
register_attempts_network as register_attempts_network: int,
register_attempts_wifi as register_attempts_wifi: int,
register_failures_network as register_failures_network: int,
register_failures_wifi as register_failures_wifi: int,
milliseconds_of_use_network as milliseconds_of_use_network: long,
milliseconds_of_use_wifi as milliseconds_of_use_wifi: long;

kpi_rtp_hr_tbl = FOREACH kpi_rtp_fil_tbl GENERATE
SUBSTRING(imsi,0,15) as imsi:chararray,
(chararray)p_date_key as date_key:chararray,
total_gap_length_network_uplink as total_gap_length_network_uplink: long,
total_gap_length_network_downlink as total_gap_length_network_downlink: long,
total_gap_length_wifi_uplink as total_gap_length_wifi_uplink: long,
total_gap_length_wifi_downlink as total_gap_length_wifi_downlink: long,
call_duration_network_uplink_ms as call_duration_network_uplink_ms: long,
call_duration_network_downlink_ms as call_duration_network_downlink_ms: long,
call_duration_wifi_uplink_ms as call_duration_wifi_uplink_ms: long,
call_duration_wifi_downlink_ms as call_duration_wifi_downlink_ms: long,
mos_network_downlink_num as mos_network_downlink_num: double,
mos_network_uplink_num as mos_network_uplink_num: double,
mos_wifi_downlink_num as mos_wifi_downlink_num: double,
mos_wifi_uplink_num as mos_wifi_uplink_num: double,
mos_network_downlink_den as mos_network_downlink_den: long,
mos_network_uplink_den as mos_network_uplink_den: long,
mos_wifi_downlink_den as mos_wifi_downlink_den: long,
mos_wifi_uplink_den as mos_wifi_uplink_den: long;

sub_profile_filtered = FOREACH subscriber_data GENERATE
mdn as mdn:chararray,
imei as imei:chararray,
imsi as imsi:chararray,
(chararray)subscriber_id as subscriber_id:chararray,
manufacturer as make:chararray,
model as model:chararray,
update_time as update_time:chararray;

--Get latest by mdn,imei,imsi
max_rec_mdn_imei_imsi = FOREACH (GROUP sub_profile_filtered by (mdn,imei,imsi)) {
 ordered = ORDER sub_profile_filtered BY update_time DESC;
 latest = LIMIT ordered 1;
 GENERATE FLATTEN(latest);
}
sub_profile_data = FOREACH max_rec_mdn_imei_imsi GENERATE
latest::mdn as mdn,
latest::imei as imei,
latest::imsi as imsi,
latest::subscriber_id as subscriber_id,
latest::update_time as update_time,
latest::make as make,
latest::model as model;

--Get latest by imei,imsi
max_rec_imei_imsi = FOREACH (GROUP sub_profile_filtered by (imei,imsi)) {
 ordered = ORDER sub_profile_filtered BY update_time DESC;
 latest = LIMIT ordered 1;
 GENERATE FLATTEN(latest);
}
sub_profile_data_imei_imsi = FOREACH max_rec_imei_imsi GENERATE
latest::mdn as mdn,
latest::imei as imei,
latest::imsi as imsi,
latest::subscriber_id as subscriber_id,
latest::update_time as update_time,
latest::make as make,
latest::model as model;

--Get subscriber_id latest by mdn,imsi
max_rec_mdn_imsi = FOREACH (GROUP sub_profile_filtered by (mdn,imsi)) {
 ordered = ORDER sub_profile_filtered BY update_time DESC;
 latest = LIMIT ordered 1;
 GENERATE FLATTEN(latest);
}
sub_profile_data_mdn_imsi = FOREACH max_rec_mdn_imsi GENERATE
latest::mdn as mdn,
latest::imei as imei,
latest::imsi as imsi,
latest::subscriber_id as subscriber_id,
latest::update_time as update_time,
latest::make as make,
latest::model as model;

--Get subscriber_id latest by mdn,imei
max_rec_mdn_imei = FOREACH (GROUP sub_profile_filtered by (mdn,imei)) {
 ordered = ORDER sub_profile_filtered BY update_time DESC;
 latest = LIMIT ordered 1;
 GENERATE FLATTEN(latest);
}
sub_profile_data_mdn_imei = FOREACH max_rec_mdn_imei GENERATE
latest::mdn as mdn,
latest::imei as imei,
latest::imsi as imsi,
latest::subscriber_id as subscriber_id,
latest::update_time as update_time,
latest::make as make,
latest::model as model;

--Get fields in need
kpi_prc_tbl_1 = FOREACH kpi_hr_tbl GENERATE
SUBSTRING((chararray)p_date_key,0,10) as trans_dt_hr:chararray,
CASE WHEN subscriber_key is not null THEN REPLACE(subscriber_key,'^[1]','') ELSE subscriber_key END as mdn:chararray,
imei as imei:chararray,
imsi as imsi:chararray,
attach_failures as attach_failures:int,
attach_attempts as attach_attempts:int,
radio_bearer_setup_failures as radio_bearer_setup_failures:int,
service_request_failures as service_request_failures:int,
service_request_attempts as service_request_attempts:int,
session_setup_failures as session_setup_failures:int,
session_setup_attempts as session_setup_attempts:int,
context_drops as context_drops:long,
context_events as context_events:long,
volte_voice_calls_dropped as volte_voice_calls_dropped:int,
volte_voice_setup_incomplete_calls as volte_voice_setup_incomplete_calls:long,
radio_bearer_drops as radio_bearer_drops:int,
radio_bearer_setup_attempts as radio_bearer_setup_attempts:int,
dl_pdcp_rlc_volume as dl_pdcp_rlc_volume:long,
dl_active_time_milliseconds as dl_active_time_milliseconds:int,
ul_pdcp_rlc_volume as ul_pdcp_rlc_volume:long,
ul_active_time_milliseconds as ul_active_time_milliseconds:int,
LOG10(1+dist_to_cell_variance) as traveling_indicator_std_var:double,
pdn_conn_failures as pdn_conn_failures:int,
pdn_conn_attempts as pdn_conn_attempts:int,
radio_bearer_setup_completes as radio_bearer_setup_completes:int,
(double)ul_volume_weighted_throughput as ul_volume_weighted_throughput:double,
(double)dl_volume_weighted_throughput as dl_volume_weighted_throughput:double,
(double)ul_volume_weighted_throughput*(double)ul_pdcp_rlc_volume as mul_ul_volume_weighted_throughput:double,
(double)dl_volume_weighted_throughput*(double)dl_pdcp_rlc_volume as mul_dl_volume_weighted_throughput:double;

--Split p-table into 4 segments to provide possible valid data kpis
SPLIT kpi_prc_tbl_1 INTO
 p_tbl_by_no_null_keys IF (mdn is not null and mdn != '-1' and imei is not null and imei != '-1' and imsi is not null and imsi != '-1'),
 p_tbl_by_mdn_null IF ((mdn is null or mdn == '-1') and (imsi is not null and imsi != '-1' and imei is not null and imei != '-1')),
 p_tbl_by_imei_null IF ((imei is null or imei == '-1') and (mdn is not null and mdn != '-1' and imsi is not null and imsi != '-1')),
 p_tbl_by_imsi_null IF ((imsi is null or imsi == '-1') and (mdn is not null and mdn != '-1' and imei is not null and imei != '-1'));

--Inner join by respective subscriber_profile dataset and get latest mdn,imei,imsi,make,model,subscriber_id keys
get_new_val_by_non_null_keys = JOIN p_tbl_by_no_null_keys BY (mdn,imei,imsi), sub_profile_data BY (mdn,imei,imsi);

matched_keys = FOREACH get_new_val_by_non_null_keys GENERATE
p_tbl_by_no_null_keys::trans_dt_hr  as trans_dt_hr,
sub_profile_data::mdn as mdn,
sub_profile_data::imei as imei,
sub_profile_data::imsi as imsi,
sub_profile_data::subscriber_id as subscriber_id,
sub_profile_data::make as make,
sub_profile_data::model as model,
sub_profile_data::update_time as update_time,
p_tbl_by_no_null_keys::attach_failures                            as attach_failures,
p_tbl_by_no_null_keys::attach_attempts                            as attach_attempts,
p_tbl_by_no_null_keys::radio_bearer_setup_failures                as radio_bearer_setup_failures,
p_tbl_by_no_null_keys::service_request_failures                   as service_request_failures,
p_tbl_by_no_null_keys::service_request_attempts                   as service_request_attempts,
p_tbl_by_no_null_keys::session_setup_failures                     as session_setup_failures,
p_tbl_by_no_null_keys::session_setup_attempts                     as session_setup_attempts,
p_tbl_by_no_null_keys::context_drops                              as context_drops,
p_tbl_by_no_null_keys::context_events                             as context_events,
p_tbl_by_no_null_keys::volte_voice_calls_dropped                 as  volte_voice_calls_dropped,
p_tbl_by_no_null_keys::volte_voice_setup_incomplete_calls        as  volte_voice_setup_incomplete_calls,
p_tbl_by_no_null_keys::radio_bearer_drops                       as   radio_bearer_drops,
p_tbl_by_no_null_keys::radio_bearer_setup_attempts               as  radio_bearer_setup_attempts,
p_tbl_by_no_null_keys::dl_pdcp_rlc_volume                        as  dl_pdcp_rlc_volume,
p_tbl_by_no_null_keys::dl_active_time_milliseconds               as  dl_active_time_milliseconds,
p_tbl_by_no_null_keys::ul_pdcp_rlc_volume                        as  ul_pdcp_rlc_volume,
p_tbl_by_no_null_keys::ul_active_time_milliseconds              as   ul_active_time_milliseconds,
p_tbl_by_no_null_keys::traveling_indicator_std_var               as  traveling_indicator_std_var,
p_tbl_by_no_null_keys::pdn_conn_failures                         as  pdn_conn_failures,
p_tbl_by_no_null_keys::pdn_conn_attempts                         as  pdn_conn_attempts,
p_tbl_by_no_null_keys::radio_bearer_setup_completes              as  radio_bearer_setup_completes,
p_tbl_by_no_null_keys::ul_volume_weighted_throughput             as  ul_volume_weighted_throughput,
p_tbl_by_no_null_keys::dl_volume_weighted_throughput             as  dl_volume_weighted_throughput,
p_tbl_by_no_null_keys::mul_ul_volume_weighted_throughput         as  mul_ul_volume_weighted_throughput,
p_tbl_by_no_null_keys::mul_dl_volume_weighted_throughput         as  mul_dl_volume_weighted_throughput;

--Inner join by respective subscriber_profile dataset and get latest mdn,imei,imsi,make,model,subscriber_id keys
get_new_val_by_mdn = JOIN p_tbl_by_mdn_null BY (imei,imsi), sub_profile_data_imei_imsi BY (imei,imsi);

replaced_mdns = FOREACH get_new_val_by_mdn GENERATE
p_tbl_by_mdn_null::trans_dt_hr  as trans_dt_hr,
sub_profile_data_imei_imsi::mdn as mdn,
sub_profile_data_imei_imsi::imei as imei,
sub_profile_data_imei_imsi::imsi as imsi,
sub_profile_data_imei_imsi::subscriber_id as subscriber_id,
sub_profile_data_imei_imsi::make as make,
sub_profile_data_imei_imsi::model as model,
sub_profile_data_imei_imsi::update_time as update_time,
p_tbl_by_mdn_null::attach_failures as attach_failures ,
p_tbl_by_mdn_null::attach_attempts as attach_attempts ,
p_tbl_by_mdn_null::radio_bearer_setup_failures              as radio_bearer_setup_failures,
p_tbl_by_mdn_null::service_request_failures                 as service_request_failures,
p_tbl_by_mdn_null::service_request_attempts                 as service_request_attempts,
p_tbl_by_mdn_null::session_setup_failures                   as session_setup_failures,
p_tbl_by_mdn_null::session_setup_attempts                   as session_setup_attempts,
p_tbl_by_mdn_null::context_drops                            as context_drops,
p_tbl_by_mdn_null::context_events                           as context_events,
p_tbl_by_mdn_null::volte_voice_calls_dropped               as volte_voice_calls_dropped,
p_tbl_by_mdn_null::volte_voice_setup_incomplete_calls      as volte_voice_setup_incomplete_calls,
p_tbl_by_mdn_null::radio_bearer_drops                     as radio_bearer_drops,
p_tbl_by_mdn_null::radio_bearer_setup_attempts           as radio_bearer_setup_attempts,
p_tbl_by_mdn_null::dl_pdcp_rlc_volume                      as dl_pdcp_rlc_volume,
p_tbl_by_mdn_null::dl_active_time_milliseconds             as dl_active_time_milliseconds,
p_tbl_by_mdn_null::ul_pdcp_rlc_volume                      as ul_pdcp_rlc_volume,
p_tbl_by_mdn_null::ul_active_time_milliseconds            as ul_active_time_milliseconds,
p_tbl_by_mdn_null::traveling_indicator_std_var             as traveling_indicator_std_var,
p_tbl_by_mdn_null::pdn_conn_failures                       as pdn_conn_failures,
p_tbl_by_mdn_null::pdn_conn_attempts                       as pdn_conn_attempts,
p_tbl_by_mdn_null::radio_bearer_setup_completes            as radio_bearer_setup_completes,
p_tbl_by_mdn_null::ul_volume_weighted_throughput           as ul_volume_weighted_throughput,
p_tbl_by_mdn_null::dl_volume_weighted_throughput           as dl_volume_weighted_throughput,
p_tbl_by_mdn_null::mul_ul_volume_weighted_throughput       as mul_ul_volume_weighted_throughput,
p_tbl_by_mdn_null::mul_dl_volume_weighted_throughput       as mul_dl_volume_weighted_throughput;

--Inner join by respective subscriber_profile dataset and get latest mdn,imei,imsi,make,model,subscriber_id keys
get_new_val_by_imei = JOIN p_tbl_by_imei_null BY (mdn,imsi), sub_profile_data_mdn_imsi BY (mdn,imsi);

replaced_imeis = FOREACH get_new_val_by_imei GENERATE
p_tbl_by_imei_null::trans_dt_hr  as trans_dt_hr,
sub_profile_data_mdn_imsi::mdn as mdn,
sub_profile_data_mdn_imsi::imei as imei,
sub_profile_data_mdn_imsi::imsi as imsi,
sub_profile_data_mdn_imsi::subscriber_id as subscriber_id,
sub_profile_data_mdn_imsi::make as make,
sub_profile_data_mdn_imsi::model as model,
sub_profile_data_mdn_imsi::update_time as update_time,
p_tbl_by_imei_null::attach_failures as attach_failures ,
p_tbl_by_imei_null::attach_attempts as attach_attempts ,
p_tbl_by_imei_null::radio_bearer_setup_failures              as radio_bearer_setup_failures,
p_tbl_by_imei_null::service_request_failures                 as service_request_failures,
p_tbl_by_imei_null::service_request_attempts                 as service_request_attempts,
p_tbl_by_imei_null::session_setup_failures                   as session_setup_failures,
p_tbl_by_imei_null::session_setup_attempts                   as session_setup_attempts,
p_tbl_by_imei_null::context_drops                            as context_drops,
p_tbl_by_imei_null::context_events                           as context_events,
p_tbl_by_imei_null::volte_voice_calls_dropped               as volte_voice_calls_dropped,
p_tbl_by_imei_null::volte_voice_setup_incomplete_calls      as volte_voice_setup_incomplete_calls,
p_tbl_by_imei_null::radio_bearer_drops                     as radio_bearer_drops,
p_tbl_by_imei_null::radio_bearer_setup_attempts             as radio_bearer_setup_attempts,
p_tbl_by_imei_null::dl_pdcp_rlc_volume                      as dl_pdcp_rlc_volume,
p_tbl_by_imei_null::dl_active_time_milliseconds             as dl_active_time_milliseconds,
p_tbl_by_imei_null::ul_pdcp_rlc_volume                      as ul_pdcp_rlc_volume,
p_tbl_by_imei_null::ul_active_time_milliseconds            as ul_active_time_milliseconds,
p_tbl_by_imei_null::traveling_indicator_std_var             as traveling_indicator_std_var,
p_tbl_by_imei_null::pdn_conn_failures                       as pdn_conn_failures,
p_tbl_by_imei_null::pdn_conn_attempts                       as pdn_conn_attempts,
p_tbl_by_imei_null::radio_bearer_setup_completes           as radio_bearer_setup_completes,
p_tbl_by_imei_null::ul_volume_weighted_throughput           as ul_volume_weighted_throughput,
p_tbl_by_imei_null::dl_volume_weighted_throughput           as dl_volume_weighted_throughput,
p_tbl_by_imei_null::mul_ul_volume_weighted_throughput       as mul_ul_volume_weighted_throughput,
p_tbl_by_imei_null::mul_dl_volume_weighted_throughput      as mul_dl_volume_weighted_throughput;

--Inner join by respective subscriber_profile dataset and get latest mdn,imei,imsi,make,model,subscriber_id keys
get_new_val_by_imsi = JOIN p_tbl_by_imsi_null BY (mdn,imei), sub_profile_data_mdn_imei BY (mdn,imei);

replaced_imsis = FOREACH get_new_val_by_imsi GENERATE
p_tbl_by_imsi_null::trans_dt_hr  as trans_dt_hr,
sub_profile_data_mdn_imei::mdn as mdn,
sub_profile_data_mdn_imei::imei as imei,
sub_profile_data_mdn_imei::imsi as imsi,
sub_profile_data_mdn_imei::subscriber_id as subscriber_id,
sub_profile_data_mdn_imei::make as make,
sub_profile_data_mdn_imei::model as model,
sub_profile_data_mdn_imei::update_time as update_time,
p_tbl_by_imsi_null::attach_failures as attach_failures,
p_tbl_by_imsi_null::attach_attempts as attach_attempts,
p_tbl_by_imsi_null::radio_bearer_setup_failures              as radio_bearer_setup_failures,
p_tbl_by_imsi_null::service_request_failures                 as service_request_failures,
p_tbl_by_imsi_null::service_request_attempts                 as service_request_attempts,
p_tbl_by_imsi_null::session_setup_failures                   as session_setup_failures,
p_tbl_by_imsi_null::session_setup_attempts                   as session_setup_attempts,
p_tbl_by_imsi_null::context_drops                            as context_drops,
p_tbl_by_imsi_null::context_events                           as context_events,
p_tbl_by_imsi_null::volte_voice_calls_dropped               as volte_voice_calls_dropped,
p_tbl_by_imsi_null::volte_voice_setup_incomplete_calls      as volte_voice_setup_incomplete_calls,
p_tbl_by_imsi_null::radio_bearer_drops                   as radio_bearer_drops,
p_tbl_by_imsi_null::radio_bearer_setup_attempts             as radio_bearer_setup_attempts,
p_tbl_by_imsi_null::dl_pdcp_rlc_volume                      as dl_pdcp_rlc_volume,
p_tbl_by_imsi_null::dl_active_time_milliseconds             as dl_active_time_milliseconds,
p_tbl_by_imsi_null::ul_pdcp_rlc_volume                      as ul_pdcp_rlc_volume,
p_tbl_by_imsi_null::ul_active_time_milliseconds            as ul_active_time_milliseconds,
p_tbl_by_imsi_null::traveling_indicator_std_var             as traveling_indicator_std_var,
p_tbl_by_imsi_null::pdn_conn_failures                       as pdn_conn_failures,
p_tbl_by_imsi_null::pdn_conn_attempts                       as pdn_conn_attempts,
p_tbl_by_imsi_null::radio_bearer_setup_completes            as radio_bearer_setup_completes,
p_tbl_by_imsi_null::ul_volume_weighted_throughput           as ul_volume_weighted_throughput,
p_tbl_by_imsi_null::dl_volume_weighted_throughput           as dl_volume_weighted_throughput,
p_tbl_by_imsi_null::mul_ul_volume_weighted_throughput       as mul_ul_volume_weighted_throughput,
p_tbl_by_imsi_null::mul_dl_volume_weighted_throughput       as mul_dl_volume_weighted_throughput;

--Merge data from all data kpi joins
kpi_joind_sub_tbl = UNION matched_keys, replaced_mdns, replaced_imeis, replaced_imsis;

--Get final data KPIs by subscriber_id
group_final_recs = GROUP kpi_joind_sub_tbl BY (trans_dt_hr,subscriber_id);

final_data_kpis = FOREACH group_final_recs {
  --Take only one record to avoid multiple records with same mdn,imei,imsi added in same 15-min interval
  sort_latest = ORDER kpi_joind_sub_tbl BY update_time DESC;
  de_dup_rec = LIMIT sort_latest 1;
  GENERATE FLATTEN(group) as (trans_dt_hr,subscriber_id),
  FLATTEN(de_dup_rec.mdn) as mdn,
  FLATTEN(de_dup_rec.imsi) as imsi,
  FLATTEN(de_dup_rec.imei) as imei,
  FLATTEN(de_dup_rec.make) as make,
  FLATTEN(de_dup_rec.model) as model,
  FLATTEN(de_dup_rec.update_time) as update_time,
  (((double)SUM(kpi_joind_sub_tbl.attach_failures)/(double)SUM(kpi_joind_sub_tbl.attach_attempts))*100) as attach_failure_pct:double,
   SUM(kpi_joind_sub_tbl.attach_failures) as attach_failures_cnt:int,
   SUM(kpi_joind_sub_tbl.attach_attempts) as attach_attempts_cnt:int,
   (((double)SUM(kpi_joind_sub_tbl.radio_bearer_setup_failures)/(double)SUM(kpi_joind_sub_tbl.radio_bearer_setup_attempts))*100) as rrc_setup_failure_pct:double,
   SUM(kpi_joind_sub_tbl.radio_bearer_setup_failures) as rrc_setup_failures_cnt:int,
   SUM(kpi_joind_sub_tbl.radio_bearer_setup_attempts) as rrc_setup_attempts_cnt:int,
   (((double)SUM(kpi_joind_sub_tbl.service_request_failures)/(double)SUM(kpi_joind_sub_tbl.service_request_attempts))*100) as  srf_pct:double,
   SUM(kpi_joind_sub_tbl.service_request_failures) as service_request_failures_cnt:int,
   SUM(kpi_joind_sub_tbl.service_request_attempts) as service_request_attempts_cnt:int,
   (((double)SUM(kpi_joind_sub_tbl.pdn_conn_failures)/(double)SUM(kpi_joind_sub_tbl.pdn_conn_attempts))*100) as  pcf_pct:double,
   SUM(kpi_joind_sub_tbl.pdn_conn_failures) as session_setup_failures_cnt:int,
   SUM(kpi_joind_sub_tbl.pdn_conn_attempts) as session_setup_attempts_cnt:int,
   (((double)SUM(kpi_joind_sub_tbl.context_drops)/(double)SUM(kpi_joind_sub_tbl.context_events))*100) as cd_pct:double,
   SUM(kpi_joind_sub_tbl.context_drops) as context_drops_cnt:long,
   SUM(kpi_joind_sub_tbl.context_events) as context_events_cnt:long,
   null as sip_dropped_calls_pct:double,
   SUM(kpi_joind_sub_tbl.volte_voice_calls_dropped) as volte_voice_calls_dropped:int,
   SUM(kpi_joind_sub_tbl.volte_voice_setup_incomplete_calls) as volte_voice_setup_incomplete_calls_cnt:long,
   (((double)SUM(kpi_joind_sub_tbl.radio_bearer_drops)/(double)SUM(kpi_joind_sub_tbl.radio_bearer_setup_completes))*100) as rrc_radio_drop_pct:double,
   SUM(kpi_joind_sub_tbl.radio_bearer_drops) as radio_bearer_drops_cnt:int,
   SUM(kpi_joind_sub_tbl.radio_bearer_setup_completes) as radio_bearer_setup_attempts_cnt:int,
   (((SUM(kpi_joind_sub_tbl.dl_pdcp_rlc_volume)*8)/SUM(kpi_joind_sub_tbl.dl_active_time_milliseconds))) as downlink_throughput_kbps:double,
   (((SUM(kpi_joind_sub_tbl.ul_pdcp_rlc_volume)*8)/SUM(kpi_joind_sub_tbl.ul_active_time_milliseconds))) as  uplink_thoughput_kbps:double,
   SUM(kpi_joind_sub_tbl.dl_pdcp_rlc_volume) as downlink_data_volume:long,
   SUM(kpi_joind_sub_tbl.dl_active_time_milliseconds) as downlink_active_time_ms:int,
   SUM(kpi_joind_sub_tbl.ul_pdcp_rlc_volume) as uplink_data_volume:long,
   SUM(kpi_joind_sub_tbl.ul_active_time_milliseconds) as uplink_active_time_ms:int,
   AVG(kpi_joind_sub_tbl.traveling_indicator_std_var) as travelling_indicator:double,
   COUNT($1) as travelling_indicator_cnt:int,
   ((double)SUM(kpi_joind_sub_tbl.mul_ul_volume_weighted_throughput)/(double)SUM(kpi_joind_sub_tbl.ul_pdcp_rlc_volume)) as volume_weighted_uplink_thpt_kbps:double,
   ((double)SUM(kpi_joind_sub_tbl.mul_dl_volume_weighted_throughput)/(double)SUM(kpi_joind_sub_tbl.dl_pdcp_rlc_volume)) as volume_weighted_downlink_thpt_kbps:double;
};

--Agg. KPIs by IMSI
group_sip_by_imsi = GROUP kpi_sip_hr_tbl BY imsi;

kpi_sip_hr1_tbl = FOREACH group_sip_by_imsi {
    sort_latest = ORDER kpi_sip_hr_tbl BY date_key DESC;
        latest = LIMIT sort_latest 1;
    GENERATE group as imsi:chararray,
         FLATTEN(latest.date_key) as date_key:chararray,
         SUM(kpi_sip_hr_tbl.call_attempts_network) as call_attempts_network:int,
         SUM(kpi_sip_hr_tbl.call_attempts_wifi) as call_attempts_wifi:int,
         SUM(kpi_sip_hr_tbl.call_drop_including_ho_network) as call_drop_including_ho_network: int,
         SUM(kpi_sip_hr_tbl.call_drop_including_ho_wifi) as call_drop_including_ho_wifi: int,
         SUM(kpi_sip_hr_tbl.seer_network) as seer_network: int,
         SUM(kpi_sip_hr_tbl.seer_wifi) as seer_wifi: int,
         SUM(kpi_sip_hr_tbl.calls_with_a_leg_network) as calls_with_a_leg_network: int,
         SUM(kpi_sip_hr_tbl.calls_with_a_leg_wifi) as calls_with_a_leg_wifi: int,
         SUM(kpi_sip_hr_tbl.register_attempts_network) as attempts_network: int,
         SUM(kpi_sip_hr_tbl.register_attempts_wifi) as attempts_wifi: int,
         SUM(kpi_sip_hr_tbl.register_failures_network) as failures_network: int,
         SUM(kpi_sip_hr_tbl.register_failures_wifi) as failures_wifi: int,
         SUM(kpi_sip_hr_tbl.milliseconds_of_use_network) as seconds_of_use_network: long,
         SUM(kpi_sip_hr_tbl.milliseconds_of_use_wifi) as seconds_of_use_wifi: long;
};

--Agg. KPIs by IMSI
group_rtp_by_imsi = GROUP kpi_rtp_hr_tbl BY imsi;

kpi_rtp_hr1_tbl = FOREACH group_rtp_by_imsi {
    sort_latest = ORDER kpi_rtp_hr_tbl BY date_key DESC;
        latest = LIMIT sort_latest 1;
    GENERATE group as imsi:chararray,
        FLATTEN(latest.date_key) as date_key:chararray,
        SUM(kpi_rtp_hr_tbl.total_gap_length_network_uplink) as total_gap_length_network_uplink: long,
        SUM(kpi_rtp_hr_tbl.total_gap_length_network_downlink) as total_gap_length_network_downlink: long,
        SUM(kpi_rtp_hr_tbl.total_gap_length_wifi_uplink) as total_gap_length_wifi_uplink: long,
        SUM(kpi_rtp_hr_tbl.total_gap_length_wifi_downlink) as total_gap_length_wifi_downlink: long,
        SUM(kpi_rtp_hr_tbl.call_duration_network_uplink_ms) as call_duration_network_uplink_ms: long,
        SUM(kpi_rtp_hr_tbl.call_duration_network_downlink_ms) as call_duration_network_downlink_ms: long,
        SUM(kpi_rtp_hr_tbl.call_duration_wifi_uplink_ms) as call_duration_wifi_uplink_ms: long,
        SUM(kpi_rtp_hr_tbl.call_duration_wifi_downlink_ms) as call_duration_wifi_downlink_ms: long,
        SUM(kpi_rtp_hr_tbl.mos_network_downlink_num) as mos_network_downlink_num: double,
        SUM(kpi_rtp_hr_tbl.mos_network_uplink_num)as mos_network_uplink_num: double,
        SUM(kpi_rtp_hr_tbl.mos_wifi_downlink_num) as mos_wifi_downlink_num: double,
        SUM(kpi_rtp_hr_tbl.mos_wifi_uplink_num) as mos_wifi_uplink_num: double,
        SUM(kpi_rtp_hr_tbl.mos_network_downlink_den) as mos_network_downlink_den: long,
        SUM(kpi_rtp_hr_tbl.mos_network_uplink_den) as mos_network_uplink_den: long,
        SUM(kpi_rtp_hr_tbl.mos_wifi_downlink_den) as mos_wifi_downlink_den: long,
        SUM(kpi_rtp_hr_tbl.mos_wifi_uplink_den) as mos_wifi_uplink_den: long;
};

--Join sip/rtp datasets and get latest imsi and date_key
join_sip_rtp_tbls = JOIN kpi_sip_hr1_tbl by imsi FULL OUTER, kpi_rtp_hr1_tbl by imsi;

voice_kpis = FOREACH join_sip_rtp_tbls GENERATE
        ((kpi_sip_hr1_tbl::imsi is NULL) ? kpi_rtp_hr1_tbl::imsi : kpi_sip_hr1_tbl::imsi) as imsi:chararray,
        ((kpi_sip_hr1_tbl::date_key is NULL) ? SUBSTRING((chararray)kpi_rtp_hr1_tbl::date_key,0,10) : SUBSTRING((chararray)kpi_sip_hr1_tbl::date_key,0,10)) as trans_dt_hr:chararray,
        kpi_sip_hr1_tbl::call_attempts_network as call_attempts_network:int,
        kpi_sip_hr1_tbl::call_attempts_wifi as call_attempts_wifi:int,
        kpi_sip_hr1_tbl::call_drop_including_ho_network as call_drop_including_ho_network: int,
        kpi_sip_hr1_tbl::call_drop_including_ho_wifi as call_drop_including_ho_wifi: int,
        kpi_sip_hr1_tbl::seer_network as seer_network: int,
        kpi_sip_hr1_tbl::seer_wifi as seer_wifi: int,
        kpi_sip_hr1_tbl::calls_with_a_leg_network as calls_with_a_leg_network: int,
        kpi_sip_hr1_tbl::calls_with_a_leg_wifi as calls_with_a_leg_wifi: int,
        kpi_sip_hr1_tbl::attempts_network as attempts_network: int,
        kpi_sip_hr1_tbl::attempts_wifi as attempts_wifi: int,
        kpi_sip_hr1_tbl::failures_network as failures_network: int,
        kpi_sip_hr1_tbl::failures_wifi as failures_wifi: int,
        kpi_sip_hr1_tbl::seconds_of_use_network as seconds_of_use_network: long,
        kpi_sip_hr1_tbl::seconds_of_use_wifi as seconds_of_use_wifi: long,
        kpi_rtp_hr1_tbl::total_gap_length_network_uplink as total_gap_length_network_uplink: long,
        kpi_rtp_hr1_tbl::total_gap_length_network_downlink as total_gap_length_network_downlink: long,
        kpi_rtp_hr1_tbl::total_gap_length_wifi_uplink as total_gap_length_wifi_uplink: long,
        kpi_rtp_hr1_tbl::total_gap_length_wifi_downlink as total_gap_length_wifi_downlink: long,
        kpi_rtp_hr1_tbl::call_duration_network_uplink_ms as call_duration_network_uplink_ms: long,
        kpi_rtp_hr1_tbl::call_duration_network_downlink_ms as call_duration_network_downlink_ms: long,
        kpi_rtp_hr1_tbl::call_duration_wifi_uplink_ms as call_duration_wifi_uplink_ms: long,
        kpi_rtp_hr1_tbl::call_duration_wifi_downlink_ms as call_duration_wifi_downlink_ms: long,
        kpi_rtp_hr1_tbl::mos_network_downlink_num as mos_network_downlink_num: double,
        kpi_rtp_hr1_tbl::mos_network_uplink_num as mos_network_uplink_num: double,
        kpi_rtp_hr1_tbl::mos_wifi_downlink_num as mos_wifi_downlink_num: double,
        kpi_rtp_hr1_tbl::mos_wifi_uplink_num as mos_wifi_uplink_num: double,
        kpi_rtp_hr1_tbl::mos_network_downlink_den as mos_network_downlink_den: long,
        kpi_rtp_hr1_tbl::mos_network_uplink_den as mos_network_uplink_den: long,
        kpi_rtp_hr1_tbl::mos_wifi_downlink_den as mos_wifi_downlink_den: long,
        kpi_rtp_hr1_tbl::mos_wifi_uplink_den as mos_wifi_uplink_den: long;

--Get latest mdn,imei,imsi,subscriber_id from subscriber profile by imsi
group_sub_prf_by_imsi = GROUP sub_profile_filtered BY imsi;

get_latest_subscriber_by_imsi = FOREACH group_sub_prf_by_imsi {
        sort_latest = ORDER sub_profile_filtered BY update_time DESC;
        latest = LIMIT sort_latest 1;
        GENERATE FLATTEN(latest);
};

subscriber_snapshot = FOREACH get_latest_subscriber_by_imsi GENERATE
latest::mdn as mdn:chararray,
latest::imei as imei:chararray,
latest::imsi as imsi:chararray,
latest::make as make:chararray,
latest::model as model:chararray,
(chararray)latest::subscriber_id as subscriber_id:chararray,
(chararray)latest::update_time as update_time:chararray;

--Join voice kpis with subscriber profile to get latest subscriber_id
get_voice_kpi_subscriber_id = JOIN voice_kpis BY imsi LEFT, subscriber_snapshot BY imsi;

--Filter imsi with no subscriber id match, filter them and store to HDFS
imsis_with_no_subscriber_id = FILTER get_voice_kpi_subscriber_id BY subscriber_snapshot::subscriber_id is NULL;

--Filter all imsis with valid subscriber_id
imsis_with_subscriber_id = FILTER get_voice_kpi_subscriber_id BY subscriber_snapshot::subscriber_id is not NULL;

voice_kpis_with_sub_id = FOREACH imsis_with_subscriber_id GENERATE
        (chararray)voice_kpis::trans_dt_hr as trans_dt_hr:chararray,
        subscriber_snapshot::mdn as mdn:chararray,
        subscriber_snapshot::imei as imei:chararray,
        subscriber_snapshot::imsi as imsi:chararray,
        subscriber_snapshot::subscriber_id as subscriber_id:chararray,
        subscriber_snapshot::update_time as update_time:chararray,
        subscriber_snapshot::make as make:chararray,
        subscriber_snapshot::model as model:chararray,
        voice_kpis::call_attempts_network as call_attempts_network:int,
        voice_kpis::call_attempts_wifi as call_attempts_wifi:int,
        voice_kpis::call_drop_including_ho_network as call_drop_including_ho_network: int,
        voice_kpis::call_drop_including_ho_wifi as call_drop_including_ho_wifi: int,
        voice_kpis::seer_network as seer_network: int,
        voice_kpis::seer_wifi as seer_wifi: int,
        voice_kpis::calls_with_a_leg_network as calls_with_a_leg_network: int,
        voice_kpis::calls_with_a_leg_wifi as calls_with_a_leg_wifi: int,
        voice_kpis::attempts_network as attempts_network: int,
        voice_kpis::attempts_wifi as attempts_wifi: int,
        voice_kpis::failures_network as failures_network: int,
        voice_kpis::failures_wifi as failures_wifi: int,
        voice_kpis::seconds_of_use_network as seconds_of_use_network: long,
        voice_kpis::seconds_of_use_wifi as seconds_of_use_wifi: long,
        voice_kpis::total_gap_length_network_uplink as total_gap_length_network_uplink: long,
        voice_kpis::total_gap_length_network_downlink as total_gap_length_network_downlink: long,
        voice_kpis::total_gap_length_wifi_uplink as total_gap_length_wifi_uplink: long,
        voice_kpis::total_gap_length_wifi_downlink as total_gap_length_wifi_downlink: long,
        voice_kpis::call_duration_network_uplink_ms as call_duration_network_uplink_ms: long,
        voice_kpis::call_duration_network_downlink_ms as call_duration_network_downlink_ms: long,
        voice_kpis::call_duration_wifi_uplink_ms as call_duration_wifi_uplink_ms: long,
        voice_kpis::call_duration_wifi_downlink_ms as call_duration_wifi_downlink_ms: long,
        voice_kpis::mos_network_downlink_num as mos_network_downlink_num: double,
        voice_kpis::mos_network_uplink_num as mos_network_uplink_num: double,
        voice_kpis::mos_wifi_downlink_num as mos_wifi_downlink_num: double,
        voice_kpis::mos_wifi_uplink_num as mos_wifi_uplink_num: double,
        voice_kpis::mos_network_downlink_den as mos_network_downlink_den: long,
        voice_kpis::mos_network_uplink_den as mos_network_uplink_den: long,
        voice_kpis::mos_wifi_downlink_den as mos_wifi_downlink_den: long,
        voice_kpis::mos_wifi_uplink_den as mos_wifi_uplink_den: long;

--Calculate voice kpi aggregations by subscriber_id and to get latest mdn,imei,imsi,make,model,subscriber_id keys
voice_kpis_groupd = GROUP voice_kpis_with_sub_id BY subscriber_id;

final_voice_kpis = FOREACH voice_kpis_groupd {
        sort_latest = ORDER voice_kpis_with_sub_id BY update_time DESC;
        latest = LIMIT sort_latest 1;
        GENERATE group as subscriber_id:chararray,
        FLATTEN(latest.mdn) as mdn:chararray,
        FLATTEN(latest.imei) as imei:chararray,
        FLATTEN(latest.imsi) as imsi:chararray,
        FLATTEN(latest.trans_dt_hr) as trans_dt_hr:chararray,
        FLATTEN(latest.update_time) as update_time:chararray,
        FLATTEN(latest.make) as make:chararray,
        FLATTEN(latest.model) as model:chararray,
        SUM(voice_kpis_with_sub_id.call_attempts_network) as call_attempts_network:int,
        SUM(voice_kpis_with_sub_id.call_attempts_wifi) as call_attempts_wifi:int,
        SUM(voice_kpis_with_sub_id.call_drop_including_ho_network) as call_drop_including_ho_network: int,
        SUM(voice_kpis_with_sub_id.call_drop_including_ho_wifi) as call_drop_including_ho_wifi: int,
        SUM(voice_kpis_with_sub_id.seer_network) as seer_network: int,
        SUM(voice_kpis_with_sub_id.seer_wifi) as seer_wifi: int,
        SUM(voice_kpis_with_sub_id.calls_with_a_leg_network) as calls_with_a_leg_network: int,
        SUM(voice_kpis_with_sub_id.calls_with_a_leg_wifi) as calls_with_a_leg_wifi: int,
        SUM(voice_kpis_with_sub_id.attempts_network) as attempts_network: int,
        SUM(voice_kpis_with_sub_id.attempts_wifi) as attempts_wifi: int,
        SUM(voice_kpis_with_sub_id.failures_network) as failures_network: int,
        SUM(voice_kpis_with_sub_id.failures_wifi) as failures_wifi: int,
        SUM(voice_kpis_with_sub_id.seconds_of_use_network) as seconds_of_use_network: long,
        SUM(voice_kpis_with_sub_id.seconds_of_use_wifi) as seconds_of_use_wifi: long,
        SUM(voice_kpis_with_sub_id.total_gap_length_network_uplink) as total_gap_length_network_uplink: long,
        SUM(voice_kpis_with_sub_id.total_gap_length_network_downlink) as total_gap_length_network_downlink: long,
        SUM(voice_kpis_with_sub_id.total_gap_length_wifi_uplink) as total_gap_length_wifi_uplink: long,
        SUM(voice_kpis_with_sub_id.total_gap_length_wifi_downlink) as total_gap_length_wifi_downlink: long,
        SUM(voice_kpis_with_sub_id.call_duration_network_uplink_ms) as call_duration_network_uplink_ms: long,
        SUM(voice_kpis_with_sub_id.call_duration_network_downlink_ms) as call_duration_network_downlink_ms: long,
        SUM(voice_kpis_with_sub_id.call_duration_wifi_uplink_ms) as call_duration_wifi_uplink_ms: long,
        SUM(voice_kpis_with_sub_id.call_duration_wifi_downlink_ms) as call_duration_wifi_downlink_ms: long,
        SUM(voice_kpis_with_sub_id.mos_network_downlink_num) as mos_network_downlink_num: double,
        SUM(voice_kpis_with_sub_id.mos_network_uplink_num) as mos_network_uplink_num: double,
        SUM(voice_kpis_with_sub_id.mos_wifi_downlink_num) as mos_wifi_downlink_num: double,
        SUM(voice_kpis_with_sub_id.mos_wifi_uplink_num) as mos_wifi_uplink_num: double,
        SUM(voice_kpis_with_sub_id.mos_network_downlink_den) as mos_network_downlink_den: long,
        SUM(voice_kpis_with_sub_id.mos_network_uplink_den) as mos_network_uplink_den: long,
        SUM(voice_kpis_with_sub_id.mos_wifi_downlink_den) as mos_wifi_downlink_den: long,
        SUM(voice_kpis_with_sub_id.mos_wifi_uplink_den) as mos_wifi_uplink_den: long,
        SUM(voice_kpis_with_sub_id.mos_network_downlink_num)/SUM(voice_kpis_with_sub_id.mos_network_downlink_den) as mos_network_downlink:double,
        SUM(voice_kpis_with_sub_id.mos_network_uplink_num)/SUM(voice_kpis_with_sub_id.mos_network_uplink_den) as mos_network_uplink:double,
        SUM(voice_kpis_with_sub_id.mos_wifi_downlink_num)/SUM(voice_kpis_with_sub_id.mos_wifi_downlink_den) as mos_wifi_downlink:double,
        SUM(voice_kpis_with_sub_id.mos_wifi_uplink_num)/SUM(voice_kpis_with_sub_id.mos_wifi_uplink_den) as mos_wifi_uplink:double,
        SUM(voice_kpis_with_sub_id.call_drop_including_ho_network)/SUM(voice_kpis_with_sub_id.calls_with_a_leg_network) as sipcalldroprateincludingho_network:double,
        SUM(voice_kpis_with_sub_id.call_drop_including_ho_wifi)/SUM(voice_kpis_with_sub_id.calls_with_a_leg_wifi) as sipcalldroprateincludingho_wifi:double,
        SUM(voice_kpis_with_sub_id.seer_network)/SUM(voice_kpis_with_sub_id.call_attempts_network) as seer_kpi_network:double,
        SUM(voice_kpis_with_sub_id.seer_wifi)/SUM(voice_kpis_with_sub_id.call_attempts_wifi) as seer_kpi_wifi:double,
        SUM(voice_kpis_with_sub_id.total_gap_length_network_uplink)/SUM(voice_kpis_with_sub_id.call_duration_network_uplink_ms) as rtpgapratio_network_uplink:double,
        SUM(voice_kpis_with_sub_id.total_gap_length_network_downlink)/SUM(voice_kpis_with_sub_id.call_duration_network_downlink_ms) as rtpgapratio_network_downlink:double,
        SUM(voice_kpis_with_sub_id.total_gap_length_wifi_uplink)/SUM(voice_kpis_with_sub_id.call_duration_wifi_uplink_ms) as rtpgapratio_wifi_uplink:double,
        SUM(voice_kpis_with_sub_id.total_gap_length_wifi_downlink)/SUM(voice_kpis_with_sub_id.call_duration_wifi_downlink_ms) as rtpgapratio_wifi_downlink:double;
};

--Join data kpis and voice kpis by subscriber_id
join_all_kpis = JOIN final_data_kpis BY subscriber_id FULL OUTER, final_voice_kpis BY subscriber_id;

--Get latest keys and respective aggregated KPIs from data and voice
final_kpi_aggregated = FOREACH join_all_kpis GENERATE
        ((final_data_kpis::trans_dt_hr is NULL) ? final_voice_kpis::trans_dt_hr : final_data_kpis::trans_dt_hr) as trans_dt_hr:chararray,
        ((((final_data_kpis::update_time is not NULL) AND (final_voice_kpis::update_time is not NULL) AND (final_data_kpis::update_time>final_voice_kpis::update_time) AND (final_data_kpis::mdn is not NULL)) OR (final_data_kpis::update_time is not NULL AND final_voice_kpis::update_time is NULL AND final_data_kpis::mdn is not NULL)) ? final_data_kpis::mdn : final_voice_kpis::mdn) as mdn:chararray,
        ((((final_data_kpis::update_time is not NULL) AND (final_voice_kpis::update_time is not NULL) AND (final_data_kpis::update_time>final_voice_kpis::update_time) AND (final_data_kpis::imsi is not NULL)) OR (final_data_kpis::update_time is not NULL AND final_voice_kpis::update_time is NULL AND final_data_kpis::imsi is not NULL)) ? final_data_kpis::imsi : final_voice_kpis::imsi) as imsi:chararray,
        ((((final_data_kpis::update_time is not NULL) AND (final_voice_kpis::update_time is not NULL) AND (final_data_kpis::update_time>final_voice_kpis::update_time) AND (final_data_kpis::imei is not NULL)) OR (final_data_kpis::update_time is not NULL AND final_voice_kpis::update_time is NULL AND final_data_kpis::imei is not NULL)) ? final_data_kpis::imei : final_voice_kpis::imei) as imei:chararray,
        ((((final_data_kpis::update_time is not NULL) AND (final_voice_kpis::update_time is not NULL) AND (final_data_kpis::update_time>final_voice_kpis::update_time) AND (final_data_kpis::make is not NULL)) OR (final_data_kpis::update_time is not NULL AND final_voice_kpis::update_time is NULL AND final_data_kpis::make is not NULL)) ? final_data_kpis::make : final_voice_kpis::make) as make:chararray,
        ((((final_data_kpis::update_time is not NULL) AND (final_voice_kpis::update_time is not NULL) AND (final_data_kpis::update_time>final_voice_kpis::update_time) AND (final_data_kpis::model is not NULL)) OR (final_data_kpis::update_time is not NULL AND final_voice_kpis::update_time is NULL AND final_data_kpis::model is not NULL)) ? final_data_kpis::model : final_voice_kpis::model) as model:chararray,
        final_data_kpis::attach_failure_pct as attach_failure_pct:double,
        final_data_kpis::attach_failures_cnt as attach_failure_cnt:int,
        final_data_kpis::attach_attempts_cnt as attach_attempts_cnt:int,
        final_data_kpis::rrc_setup_failure_pct as rrc_setup_failure_pct:double,
        final_data_kpis::rrc_setup_failures_cnt as rrc_setup_failure_cnt:int,
        final_data_kpis::rrc_setup_attempts_cnt as rrc_setup_attempts_cnt:int,
        final_data_kpis::srf_pct as srf_pct:double,
        final_data_kpis::service_request_failures_cnt as service_request_failures_cnt:int,
        final_data_kpis::service_request_attempts_cnt as service_request_attempts_cnt:int,
        final_data_kpis::pcf_pct as pcf_pct:double,
        final_data_kpis::session_setup_failures_cnt as session_setup_failures_cnt:int,
        final_data_kpis::session_setup_attempts_cnt as session_setup_attempts_cnt:int,
        final_data_kpis::cd_pct as cd_pct:double,
        final_data_kpis::context_drops_cnt as context_drops_cnt:long,
        final_data_kpis::context_events_cnt as context_events_cnt:long,
        final_data_kpis::sip_dropped_calls_pct as sip_dropped_calls_pct:double,
        final_data_kpis::volte_voice_calls_dropped as volte_voice_calls_dropped:int,
        final_data_kpis::volte_voice_setup_incomplete_calls_cnt as volte_voice_setup_incomplete_calls_cnt:long,
        final_data_kpis::rrc_radio_drop_pct as rrc_radio_drop_pct:double,
        final_data_kpis::radio_bearer_drops_cnt as radio_bearer_drops_cnt:int,
        final_data_kpis::radio_bearer_setup_attempts_cnt as radio_bearer_setup_attempts_cnt:int,
        final_data_kpis::downlink_throughput_kbps as downlink_throughput_kbps:double,
        final_data_kpis::uplink_thoughput_kbps as uplink_thoughput_kbps:double,
        final_data_kpis::downlink_data_volume as downlink_data_volume:long,
        final_data_kpis::downlink_active_time_ms as downlink_active_time_ms:int,
        final_data_kpis::uplink_data_volume as uplink_data_volume:long,
        final_data_kpis::uplink_active_time_ms as uplink_active_time_ms:int,
        final_data_kpis::travelling_indicator as travelling_indicator:double,
        final_data_kpis::travelling_indicator_cnt as travelling_indicator_cnt:int,
        final_data_kpis::volume_weighted_uplink_thpt_kbps as volume_weighted_uplink_thpt_kbps:double,
        final_data_kpis::volume_weighted_downlink_thpt_kbps as volume_weighted_downlink_thpt_kbps:double,
        ToString(CurrentTime(),'yyyyMMdd HH:mm:ss') as load_time:chararray,
        ((final_data_kpis::subscriber_id is NULL) ? final_voice_kpis::subscriber_id : final_data_kpis::subscriber_id) as subscriber_id:chararray,
        final_voice_kpis::call_attempts_network as callattempts_network:int,
        final_voice_kpis::call_attempts_wifi as callattempts_wifi:int,
        final_voice_kpis::call_drop_including_ho_network as calldropincludingho_network: int,
        final_voice_kpis::call_drop_including_ho_wifi as calldropincludingho_wifi: int,
        final_voice_kpis::seer_network as seer_network: int,
        final_voice_kpis::seer_wifi as seer_wifi: int,
        final_voice_kpis::calls_with_a_leg_network as callswithaleg_network: int,
        final_voice_kpis::calls_with_a_leg_wifi as callswithaleg_wifi: int,
        final_voice_kpis::attempts_network as attempts_network: int,
        final_voice_kpis::attempts_wifi as attempts_wifi: int,
        final_voice_kpis::failures_network as failures_network: int,
        final_voice_kpis::failures_wifi as failures_wifi: int,
        final_voice_kpis::seconds_of_use_network as secondsofuse_network: long,
        final_voice_kpis::seconds_of_use_wifi as secondsofuse_wifi: long,
        final_voice_kpis::total_gap_length_network_uplink as totalgaplength_network_uplink: long,
        final_voice_kpis::total_gap_length_network_downlink as totalgaplength_network_downlink: long,
        final_voice_kpis::total_gap_length_wifi_uplink as totalgaplength_wifi_uplink: long,
        final_voice_kpis::total_gap_length_wifi_downlink as totalgaplength_wifi_downlink: long,
        final_voice_kpis::call_duration_network_uplink_ms as callduration_network_uplink: long,
        final_voice_kpis::call_duration_network_downlink_ms as callduration_network_downlink: long,
        final_voice_kpis::call_duration_wifi_uplink_ms as callduration_wifi_uplink: long,
        final_voice_kpis::call_duration_wifi_downlink_ms as callduration_wifi_downlink: long,
        final_voice_kpis::mos_network_downlink_num as mos_network_downlink_num: double,
        final_voice_kpis::mos_network_uplink_num as mos_network_uplink_num: double,
        final_voice_kpis::mos_wifi_downlink_num as mos_wifi_downlink_num: double,
        final_voice_kpis::mos_wifi_uplink_num as mos_wifi_uplink_num: double,
        final_voice_kpis::mos_network_downlink_den as mos_network_downlink_den: long,
        final_voice_kpis::mos_network_uplink_den as mos_network_uplink_den: long,
        final_voice_kpis::mos_wifi_downlink_den as mos_wifi_downlink_den: long,
        final_voice_kpis::mos_wifi_uplink_den as mos_wifi_uplink_den: long,
        final_voice_kpis::mos_network_downlink as mos_network_downlink:double,
        final_voice_kpis::mos_network_uplink as mos_network_uplink:double,
        final_voice_kpis::mos_wifi_downlink as mos_wifi_downlink:double,
        final_voice_kpis::mos_wifi_uplink as mos_wifi_uplink:double,
        final_voice_kpis::sipcalldroprateincludingho_network as sipcalldroprateincludingho_network:double,
        final_voice_kpis::sipcalldroprateincludingho_wifi as sipcalldroprateincludingho_wifi:double,
        final_voice_kpis::seer_kpi_network as seer_kpi_network:double,
        final_voice_kpis::seer_kpi_wifi as seer_kpi_wifi:double,
        final_voice_kpis::rtpgapratio_network_uplink as rtpgapratio_network_uplink:double,
        final_voice_kpis::rtpgapratio_network_downlink as rtpgapratio_network_downlink:double,
        final_voice_kpis::rtpgapratio_wifi_uplink as rtpgapratio_wifi_uplink:double,
        final_voice_kpis::rtpgapratio_wifi_downlink as rtpgapratio_wifi_downlink:double;

get_total_record_count_grouped = GROUP final_kpi_aggregated ALL;

total_record_count = foreach get_total_record_count_grouped generate 
MAX(final_kpi_aggregated.trans_dt_hr) as trans_dt_hr:chararray,
COUNT(final_kpi_aggregated) as rec_count:long, 
REPLACE(REPLACE(MAX(final_kpi_aggregated.load_time),':',''),' ','') as load_time:chararray;

--Save final hourly kpis dataset to HDFS
STORE final_kpi_aggregated INTO '$hdfs_out_path/trans_dt=$trans_dt/trans_hr=$trans_hr' USING PigStorage('|');

--Save voice kpi IMSIs with no subscriber_id to HDFS
STORE imsis_with_no_subscriber_id into '$hdfs_voice_invalid_imsis_out_path/trans_dt=$trans_dt/trans_hr=$trans_hr' USING PigStorage('|');

--Save record count and load_time to a file for status update
STORE total_record_count INTO '$status_dir/trans_dt=$trans_dt/trans_hr=$trans_hr' USING PigStorage('|');
